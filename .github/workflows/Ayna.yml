name: Ayna TV

on:
  schedule:
    # ржкрзНрж░рждрж┐ рзл ржорж┐ржирж┐ржЯ ржкрж░ ржкрж░ ржЖржкржбрзЗржЯ рж╣ржмрзЗ
    - cron: '*/5 * * * *'
  workflow_dispatch:  # ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓рж┐ рж░рж╛ржи ржХрж░рж╛рж░ ржЕржкрж╢ржи

permissions:
  contents: write

jobs:
  sync-ayna:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Download original playlist
      run: |
        echo "ЁЯФД Starting Ayna TV playlist sync..."
        echo "ЁЯУе Downloading from secure source..."
        
        # рж╕рж┐ржХрзНрж░рзЗржЯ URL ржерзЗржХрзЗ ржкрзНрж▓рзЗрж▓рж┐рж╕рзНржЯ ржбрж╛ржЙржирж▓рзЛржб
        curl -s -L -o original_playlist.m3u "${{ secrets.SIROMETV_AYNA }}"
        
        # ржбрж╛ржЙржирж▓рзЛржб рж╕ржлрж▓ рж╣рзЯрзЗржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ
        if [ ! -f "original_playlist.m3u" ] || [ ! -s "original_playlist.m3u" ]; then
          echo "тЭМ ERROR: Playlist download failed!"
          exit 1
        fi
        
        ORIGINAL_LINES=$(wc -l < original_playlist.m3u)
        echo "тЬЕ Download successful - $ORIGINAL_LINES lines"
        
    - name: Process and customize playlist
      run: |
        echo "ЁЯОи Customizing playlist with Sirome TV branding..."
        
        # ржЪрзНржпрж╛ржирзЗрж▓ ржХрж╛ржЙржирзНржЯ рж╕ржВржЧрзНрж░рж╣ (ржкрзНрж░ржержорзЗ рж░рж┐ржорзБржн ржХрж░рж╛рж░ ржЖржЧрзЗ)
        CHANNEL_COUNT=$(grep -c "#EXTINF:" original_playlist.m3u)
        CURRENT_TIME=$(date +'%Y-%m-%d %H:%M:%S')
        
        # ржирждрзБржи ржХрж╛рж╕рзНржЯржо рж╣рзЗржбрж╛рж░ рждрзИрж░рж┐
        echo "#EXTM3U" > Ayna.m3u
        echo "# Sirome TV" >> Ayna.m3u
        echo "# Total channels: $CHANNEL_COUNT" >> Ayna.m3u
        echo "# Updated: $CURRENT_TIME" >> Ayna.m3u
        echo "# Powered-By: BDIX" >> Ayna.m3u
        echo "" >> Ayna.m3u
        
        # Python script ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ
        python3 - << 'EOF'
        import base64
        
        # Base64 encoded patterns
        encoded_patterns = [
            "Q3JlYXRlZCBieSBAQWJ1U2FlZWRY",  # Created by @AbuSaeedX
            "IyBUb3RhbCBjaGFubmVsczo=",      # # Total channels:
            "IyBHZW5lcmF0ZWQ6",              # # Generated:
            "WCBmaXJlIEZsaXg=",              # X fire Flix
            "Ynl4ZmlyZWZsaXgvQlktWC1GSVJFLUZMSVgubXA0"  # byxfireflix/BY-X-FIRE-FLIX.mp4
        ]
        
        # Decode patterns
        patterns = [base64.b64decode(pattern.encode()).decode() for pattern in encoded_patterns]
        
        print("Patterns to remove:")
        for i, pattern in enumerate(patterns):
            print(f"  {i+1}. {pattern}")
        
        with open('original_playlist.m3u', 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        filtered_lines = []
        skip_next = False
        removed_count = 0
        
        for i, line in enumerate(lines):
            line_stripped = line.strip()
            
            # Skip #EXTM3U line from original (we already added our own)
            if line_stripped == "#EXTM3U":
                print("ЁЯЪл Removing original #EXTM3U")
                removed_count += 1
                continue
                
            # Check if this line should be skipped
            should_skip = False
            for pattern in patterns:
                if pattern in line_stripped:
                    print(f"ЁЯЪл Removing line: {line_stripped[:50]}...")
                    should_skip = True
                    removed_count += 1
                    
                    # If this is an EXTINF line, skip the next line (URL) too
                    if line_stripped.startswith("#EXTINF:"):
                        skip_next = True
                    break
            
            if should_skip:
                continue
                
            # Skip next line if previous was EXTINF that we removed
            if skip_next:
                print(f"ЁЯЪл Removing URL line: {line_stripped[:50]}...")
                skip_next = False
                removed_count += 1
                continue
            
            # Keep the line
            filtered_lines.append(line)
        
        # Add filtered content to our file (append mode)
        with open('Ayna.m3u', 'a', encoding='utf-8') as f:
            f.writelines(filtered_lines)
        
        print(f"тЬЕ Processing completed!")
        print(f"ЁЯУК Removed {removed_count} lines")
        print(f"ЁЯУК Kept {len(filtered_lines)} lines")
        EOF
        
        # ржлрж▓рж╛ржлрж▓ ржЪрзЗржХ
        FINAL_LINES=$(wc -l < Ayna.m3u)
        FINAL_CHANNELS=$(grep -c "#EXTINF:" Ayna.m3u)
        
        echo "тЬи Customization completed!"
        echo "ЁЯУК Final Statistics:"
        echo "   Original lines: $ORIGINAL_LINES"
        echo "   Final lines: $FINAL_LINES"
        echo "   Original channels: $CHANNEL_COUNT"
        echo "   Final channels: $FINAL_CHANNELS"
        echo "   Removed channels: $((CHANNEL_COUNT - FINAL_CHANNELS))"
        
        # рж╕рж╛ржорзНржкрзНрж▓ ржХржирзНржЯрзЗржирзНржЯ ржжрзЗржЦрж╛ржи
        echo "ЁЯФН First 10 lines of processed playlist:"
        head -10 Ayna.m3u
        
        # ржЯрзЗржорзНржкрзЛрж░рж╛рж░рж┐ ржлрж╛ржЗрж▓ ржХрзНрж▓рж┐ржиржЖржк
        rm -f original_playlist.m3u
        
    - name: Verify processed file
      run: |
        echo "ЁЯФН Verifying processed playlist..."
        
        if [ ! -f "Ayna.m3u" ] || [ ! -s "Ayna.m3u" ]; then
          echo "тЭМ ERROR: Processed file is missing or empty!"
          exit 1
        fi
        
        # ржЪрзЗржХ ржХрж░рзБржи ржпржжрж┐ unwanted content ржПржЦржиржУ ржЖржЫрзЗ
        if grep -q "Created by @AbuSaeedX" Ayna.m3u; then
          echo "тЭМ ERROR: Unwanted content still exists!"
          exit 1
        fi
        
        if grep -q "X fire Flix" Ayna.m3u; then
          echo "тЭМ ERROR: X fire Flix still exists!"
          exit 1
        fi
        
        FILE_SIZE=$(wc -c < Ayna.m3u)
        LINES_COUNT=$(wc -l < Ayna.m3u)
        CHANNELS=$(grep -c "#EXTINF:" Ayna.m3u)
        
        echo "тЬЕ File verification passed!"
        echo "ЁЯУЛ File details:"
        echo "   Size: $FILE_SIZE bytes"
        echo "   Lines: $LINES_COUNT"
        echo "   Channels: $CHANNELS"
        echo "тЬЕ All unwanted content successfully removed!"
        
    - name: Commit and push changes
      run: |
        echo "ЁЯТ╛ Saving changes to repository..."
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add Ayna.m3u
        
        # рж╢рзБржзрзБ changes ржерж╛ржХрж▓рзЗ commit ржХрж░рзБржи
        if git diff --staged --quiet; then
          echo "тЬЕ No changes detected - playlist is up to date"
        else
          git commit -m "ЁЯФД Ayna TV Auto Sync - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
          echo "ЁЯОЙ Successfully updated Ayna.m3u with Sirome TV branding!"
          echo "ЁЯХР Next auto-sync in 5 minutes"
        fi
        
    - name: Cleanup on success
      if: success()
      run: |
        echo "ЁЯз╣ Cleanup completed"
        echo "тЬЕ Ayna TV sync workflow finished successfully!"
