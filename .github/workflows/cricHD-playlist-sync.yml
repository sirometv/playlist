name: Sync CricHD Playlist with Logo Protection

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: pip install requests

      - name: Download and process both files with custom logos
        run: |
          python -c "
          import requests
          import re
          import json
          import os
          
          # Custom logo mapping - M3U ‡¶è‡¶¨‡¶Ç JSON ‡¶â‡¶≠‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
          CUSTOM_LOGOS = {
              'STAR SPORTS 1': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              'STAR SPORTS 1 HINDI': 'https://i.postimg.cc/85zmvH5B/image.jpg',
              'PTV SPORTS': 'https://i.postimg.cc/0QDHtZxg/image.jpg',
              'WILLOW HD': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'WILLOW HD 2': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'TEN SPORTS': 'https://i.postimg.cc/1tRmw0C2/image.jpg',
              'A SPORTS HD': 'https://i.postimg.cc/rytcs49Y/image.jpg',
              'SKY SPORTS CRICKET': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
          }
          
          print('=== Processing M3U Playlist ===')
          # ‡ßß. M3U ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç
          new_playlist_url = 'https://raw.githubusercontent.com/abusaeeidx/CricHd-playlists-Auto-Update-permanent/main/ALL.m3u'
          try:
              response = requests.get(new_playlist_url)
              response.raise_for_status()
              new_m3u_content = response.text
              print('‚úÖ M3U downloaded successfully')
          except Exception as e:
              print(f'‚ùå M3U download failed: {e}')
              exit(1)
          
          # ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® M3U ‡¶•‡ßá‡¶ï‡ßá existing logos ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®
          m3u_logo_map = {}
          if os.path.exists('CricHd.m3u'):
              try:
                  with open('CricHd.m3u', 'r', encoding='utf-8') as f:
                      old_m3u_content = f.read()
                  
                  # ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã M3U ‡¶•‡ßá‡¶ï‡ßá logo-map ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                  old_lines = old_m3u_content.split('\n')
                  i = 0
                  while i < len(old_lines):
                      if old_lines[i].startswith('#EXTINF:-1'):
                          extinf_line = old_lines[i]
                          channel_name = old_lines[i + 1] if i + 1 < len(old_lines) else ''
                          logo_match = re.search(r'tvg-logo=\"([^\"]*)\"', extinf_line)
                          if logo_match and logo_match.group(1):
                              m3u_logo_map[channel_name.upper()] = logo_match.group(1)
                          i += 2
                      else:
                          i += 1
                  print(f'‚úÖ Loaded {len(m3u_logo_map)} logos from existing M3U')
              except Exception as e:
                  print(f'‚ö†Ô∏è Could not read existing M3U: {e}')
          else:
              print('‚ÑπÔ∏è No existing M3U file found')
          
          # Custom logos ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® (M3U ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
          for channel, logo in CUSTOM_LOGOS.items():
              m3u_logo_map[channel.upper()] = logo
          print(f'‚úÖ Total {len(m3u_logo_map)} logos in mapping')
          
          # ‡¶®‡¶§‡ßÅ‡¶® M3U ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
          new_lines = new_m3u_content.split('\n')
          final_m3u_lines = []
          i = 0
          while i < len(new_lines):
              line = new_lines[i].strip()
              if not line:
                  i += 1
                  continue
                  
              if line.startswith('#EXTINF:-1'):
                  channel_name = new_lines[i + 1] if i + 1 < len(new_lines) else ''
                  channel_name_upper = channel_name.upper()
                  
                  # ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø custom logo ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
                  current_logo = None
                  for stored_channel, logo_url in m3u_logo_map.items():
                      if stored_channel and channel_name_upper and stored_channel in channel_name_upper:
                          current_logo = logo_url
                          break
                  
                  # LINE ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                  if current_logo:
                      if 'tvg-logo=' in line:
                          line = re.sub(r'tvg-logo=\"[^\"]*\"', f'tvg-logo=\"{current_logo}\"', line)
                      else:
                          line = line.replace('#EXTINF:-1', f'#EXTINF:-1 tvg-logo=\"{current_logo}\"')
                  
                  final_m3u_lines.append(line)
                  # Channel name line ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                  if i + 1 < len(new_lines):
                      final_m3u_lines.append(new_lines[i + 1].strip())
                  i += 2
              elif line.startswith('http'):
                  # Stream URL - ‡¶è‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶¨‡ßá (‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶¨‡ßá)
                  final_m3u_lines.append(line)
                  i += 1
              else:
                  # ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶≤‡¶æ‡¶á‡¶® (EXTM3U, ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø)
                  final_m3u_lines.append(line)
                  i += 1
          
          # Final M3U ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
          with open('CricHd.m3u', 'w', encoding='utf-8') as f:
              f.write('\n'.join(final_m3u_lines))
          
          print(f'‚úÖ M3U processed: {len(final_m3u_lines)} lines written')
          
          print('=== Processing JSON File ===')
          # ‡ß®. JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç
          json_url = 'https://raw.githubusercontent.com/abusaeeidx/CricHd-playlists-Auto-Update-permanent/main/api.json'
          try:
              response = requests.get(json_url)
              response.raise_for_status()
              new_json_data = response.json()
              print('‚úÖ JSON downloaded successfully')
          except Exception as e:
              print(f'‚ùå JSON download failed: {e}')
              exit(1)
          
          # ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® JSON ‡¶•‡ßá‡¶ï‡ßá existing data ‡¶™‡¶°‡¶º‡ßÅ‡¶® (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
          json_logo_map = {}
          if os.path.exists('api.json'):
              try:
                  with open('api.json', 'r', encoding='utf-8') as f:
                      old_json_data = json.load(f)
                  # ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã JSON ‡¶•‡ßá‡¶ï‡ßá logo-map ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                  for item in old_json_data:
                      if 'name' in item and 'logo' in item:
                          json_logo_map[item['name'].upper()] = item['logo']
                  print(f'‚úÖ Loaded {len(json_logo_map)} logos from existing JSON')
              except Exception as e:
                  print(f'‚ö†Ô∏è Could not read existing JSON: {e}')
          else:
              print('‚ÑπÔ∏è No existing JSON file found')
          
          # Custom logos ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® (JSON ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
          for channel, logo in CUSTOM_LOGOS.items():
              json_logo_map[channel.upper()] = logo
          
          # ‡¶®‡¶§‡ßÅ‡¶® JSON ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
          updated_count = 0
          for item in new_json_data:
              if 'name' in item:
                  channel_name_upper = item['name'].upper()
                  
                  # Custom logo ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
                  for custom_channel, logo_url in json_logo_map.items():
                      if custom_channel in channel_name_upper:
                          item['logo'] = logo_url
                          updated_count += 1
                          break
          
          # Final JSON ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
          with open('api.json', 'w', encoding='utf-8') as f:
              json.dump(new_json_data, f, indent=2, ensure_ascii=False)
          
          print(f'‚úÖ JSON processed: {updated_count} logos updated')
          print('üéâ Both M3U and JSON updated successfully!')
          print('üì∫ Stream links updated from second account')
          print('üñºÔ∏è Custom logos preserved in both files')
          "

      - name: Check for changes
        id: check_changes
        run: |
          changes=false
          if ! git diff --quiet CricHd.m3u 2>/dev/null; then
            changes=true
            echo "M3U file changed"
          fi
          if ! git diff --quiet api.json 2>/dev/null; then
            changes=true
            echo "JSON file changed"
          fi
          echo "changes=$changes" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CricHd.m3u api.json
          git commit -m "üîÑ Smart Sync: URLs updated + custom logos - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
          echo "Sync completed successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
