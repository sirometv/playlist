name: Sync CricHD Playlist with Logo Protection

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: pip install requests

      - name: Create and run Python script
        run: |
          cat > sync_script.py << 'EOF'
          import requests
          import re
          import json
          
          # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ custom logos - ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
          CUSTOM_LOGOS = {
              # Star Sports Channels
              'Star Sports 1': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              'Star Sports 1 Hindi': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              'PTV Sports': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              'Willow HD': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              
              'STAR SPORTS 1 HINDI': 'https://i.postimg.cc/85zmvH5B/image.jpg',
              'STAR SPORTS 1 HINDI HD': 'https://i.postimg.cc/85zmvH5B/image.jpg',
              'STAR SPORTS HINDI': 'https://i.postimg.cc/85zmvH5B/image.jpg',
              
              'STAR SPORTS 2': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              'STAR SPORTS 2 HD': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              'STAR SPORTS 2 FHD': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              
              'STAR SPORTS 3': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              'STAR SPORTS 3 HD': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              
              # Willow Channels
              'WILLOW HD': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'WILLOW HD 2': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'WILLOW': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'WILLOW FHD': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              
              # PTV Sports
              'PTV SPORTS': 'https://i.postimg.cc/0QDHtZxg/image.jpg',
              'PTV SPORTS HD': 'https://i.postimg.cc/0QDHtZxg/image.jpg',
              'PTV SPORTS FHD': 'https://i.postimg.cc/0QDHtZxg/image.jpg',
              
              # Ten Sports
              'TEN SPORTS': 'https://i.postimg.cc/1tRmw0C2/image.jpg',
              'TEN SPORTS HD': 'https://i.postimg.cc/1tRmw0C2/image.jpg',
              'TEN SPORTS FHD': 'https://i.postimg.cc/1tRmw0C2/image.jpg',
              
              # A Sports
              'A SPORTS HD': 'https://i.postimg.cc/rytcs49Y/image.jpg',
              'A SPORTS': 'https://i.postimg.cc/rytcs49Y/image.jpg',
              'A SPORTS FHD': 'https://i.postimg.cc/rytcs49Y/image.jpg',
              
              # Sky Sports
              'SKY SPORTS CRICKET': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'SKY SPORTS CRICKET HD': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'SKY SPORTS CRICKET FHD': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              
              # Sony Sports
              'SONY ESPN': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'SONY ESPN HD': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'SONY SIX': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'SONY SIX HD': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              
              # Other Sports Channels
              'ESPN': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'ESPN HD': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'ESPN 2': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'ESPN 2 HD': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
          }
          
          print("=== STARTING SYNC ===")
          
          # 1. M3U ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç
          print("üì∫ Processing M3U file...")
          m3u_url = "https://raw.githubusercontent.com/abusaeeidx/CricHd-playlists-Auto-Update-permanent/main/ALL.m3u"
          m3u_response = requests.get(m3u_url)
          m3u_content = m3u_response.text
          
          # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá M3U ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ channel names ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶ø
          print("\nüîç Analyzing channel names from M3U...")
          lines = m3u_content.split('\n')
          channel_names = []
          i = 0
          while i < len(lines):
              if lines[i].startswith('#EXTINF:-1'):
                  channel_name = lines[i + 1] if i + 1 < len(lines) else ''
                  if channel_name:
                      channel_names.append(channel_name)
                  i += 2
              else:
                  i += 1
          
          # Channel names ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ matching logos ‡¶¶‡ßá‡¶ñ‡¶ø
          print(f"üìä Found {len(channel_names)} channels in M3U")
          print("\nüéØ Channel-Logo Matching Results:")
          
          matched_count = 0
          unmatched_channels = []
          
          for channel_name in channel_names[:20]:  # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡ß®‡ß¶‡¶ü‡¶ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶ø
              channel_upper = channel_name.upper()
              matched_logo = None
              matched_key = None
              
              for custom_channel, logo_url in CUSTOM_LOGOS.items():
                  if custom_channel in channel_upper:
                      matched_logo = logo_url
                      matched_key = custom_channel
                      matched_count += 1
                      break
              
              if matched_logo:
                  print(f"‚úÖ MATCHED: '{channel_name}' -> '{matched_key}'")
              else:
                  print(f"‚ùå NO MATCH: '{channel_name}'")
                  unmatched_channels.append(channel_name)
          
          # ‡¶è‡¶ñ‡¶® M3U process ‡¶ï‡¶∞‡¶ø
          print("\nüîÑ Processing M3U with custom logos...")
          output_lines = []
          i = 0
          logos_applied = 0
          
          while i < len(lines):
              line = lines[i]
              
              if line.startswith('#EXTINF:-1'):
                  channel_name = lines[i + 1] if i + 1 < len(lines) else ''
                  channel_upper = channel_name.upper()
                  
                  # Channel name ‡¶•‡ßá‡¶ï‡ßá exact matching logo ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                  custom_logo = None
                  for custom_channel, logo_url in CUSTOM_LOGOS.items():
                      if custom_channel in channel_upper:
                          custom_logo = logo_url
                          break
                  
                  # ‡¶Ø‡¶¶‡¶ø custom logo ‡¶®‡¶æ ‡¶Æ‡ßá‡¶≤‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá error show ‡¶ï‡¶∞‡¶ø
                  if not custom_logo:
                      print(f"‚ö†Ô∏è  NO LOGO FOUND FOR: {channel_name}")
                      # Default logo ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá, original logo ‡¶∞‡¶æ‡¶ñ‡¶ø
                      custom_logo = "https://i.postimg.cc/1RwSzp4q/image.jpg"  # Temporary default
                  
                  # ‡¶∂‡ßÅ‡¶ß‡ßÅ tvg-logo replace ‡¶ï‡¶∞‡ßÅ‡¶®
                  if 'tvg-logo=' in line:
                      line = re.sub(r'tvg-logo=\"[^\"]*\"', f'tvg-logo=\"{custom_logo}\"', line)
                  else:
                      line = f'#EXTINF:-1 tvg-logo=\"{custom_logo}\",' + line.split(',', 1)[1] if ',' in line else line
                  
                  output_lines.append(line)
                  
                  # Channel name line ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                  if i + 1 < len(lines):
                      output_lines.append(lines[i + 1])
                  
                  logos_applied += 1
                  i += 2
                  
              elif line.startswith('http'):
                  # Stream URL - ‡¶®‡¶§‡ßÅ‡¶® M3U ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶¨‡ßá
                  output_lines.append(line)
                  i += 1
                  
              else:
                  # ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶≤‡¶æ‡¶á‡¶®
                  output_lines.append(line)
                  i += 1
          
          # M3U ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
          with open('CricHd.m3u', 'w', encoding='utf-8') as f:
              f.write('\n'.join(output_lines))
          
          print(f"\nüìä M3U Processing Summary:")
          print(f"‚úÖ Logos applied: {logos_applied}")
          print(f"üîç Channels analyzed: {len(channel_names)}")
          print(f"‚ùå Unmatched channels: {len(unmatched_channels)}")
          
          if unmatched_channels:
              print(f"\n‚ö†Ô∏è  Add these to CUSTOM_LOGOS:")
              for channel in unmatched_channels[:10]:
                  print(f"   '{channel.upper()}': 'your_logo_url_here',")
          
          # 2. JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç
          print("\nüìÑ Processing JSON file...")
          json_url = "https://raw.githubusercontent.com/abusaeeidx/CricHd-playlists-Auto-Update-permanent/main/api.json"
          json_response = requests.get(json_url)
          json_data = json_response.json()
          
          json_updated = 0
          for item in json_data:
              if 'name' in item:
                  channel_upper = item['name'].upper()
                  for custom_channel, logo_url in CUSTOM_LOGOS.items():
                      if custom_channel in channel_upper:
                          item['logo'] = logo_url
                          json_updated += 1
                          break
          
          with open('api.json', 'w', encoding='utf-8') as f:
              json.dump(json_data, f, indent=2, ensure_ascii=False)
          
          print(f"üìä JSON: {json_updated} logos updated")
          print("\nüéâ SYNC COMPLETED!")
          EOF
          
          python sync_script.py

      - name: Check for changes
        id: check_changes
        run: |
          changes=false
          if ! git diff --quiet CricHd.m3u 2>/dev/null; then
            changes=true
            echo "M3U file changed"
          fi
          if ! git diff --quiet api.json 2>/dev/null; then
            changes=true
            echo "JSON file changed"
          fi
          echo "changes=$changes" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CricHd.m3u api.json
          git commit -m "üîÑ Auto-sync: Updated with permanent custom logos"
          git push
          echo "Sync completed successfully!"
