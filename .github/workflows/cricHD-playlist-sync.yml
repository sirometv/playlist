      - name: Download and process both files with custom logos
        run: |
          python -c "
          import requests
          import re
          import json
          import os
          
          # Custom logo mapping - M3U ‡¶è‡¶¨‡¶Ç JSON ‡¶â‡¶≠‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
          CUSTOM_LOGOS = {
              'STAR SPORTS 1': 'https://i.postimg.cc/Sx4trrVy/image.jpg',
              'STAR SPORTS 1 HINDI': 'https://i.postimg.cc/85zmvH5B/image.jpg',
              'PTV SPORTS': 'https://i.postimg.cc/0QDHtZxg/image.jpg',
              'WILLOW HD': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'WILLOW HD 2': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
              'TEN SPORTS': 'https://i.postimg.cc/1tRmw0C2/image.jpg',
              'A SPORTS HD': 'https://i.postimg.cc/rytcs49Y/image.jpg',
              'SKY SPORTS CRICKET': 'https://i.postimg.cc/1RwSzp4q/image.jpg',
          }
          
          print('üîç === DEBUG: CUSTOM LOGOS ===')
          for channel, logo in CUSTOM_LOGOS.items():
              print(f'   {channel} -> {logo}')
          
          # ‡ßß. M3U ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç
          print('\\nüì∫ === DEBUG: ANALYZING M3U CHANNEL NAMES ===')
          new_playlist_url = 'https://raw.githubusercontent.com/abusaeeidx/CricHd-playlists-Auto-Update-permanent/main/ALL.m3u'
          response = requests.get(new_playlist_url)
          new_m3u_content = response.text
          
          # M3U ‡¶§‡ßá actual channel names ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
          m3u_lines = new_m3u_content.split('\\n')
          i = 0
          channel_count = 0
          matched_channels = []
          unmatched_channels = []
          
          while i < len(m3u_lines):
              line = m3u_lines[i]
              if line.startswith('#EXTINF:-1'):
                  channel_name = m3u_lines[i + 1] if i + 1 < len(m3u_lines) else 'UNKNOWN'
                  channel_name_upper = channel_name.upper()
                  channel_count += 1
                  
                  # Check for matching custom logo
                  matched = False
                  for custom_channel, logo_url in CUSTOM_LOGOS.items():
                      if custom_channel in channel_name_upper:
                          matched_channels.append((channel_name, custom_channel, logo_url))
                          matched = True
                          break
                  
                  if not matched:
                      unmatched_channels.append(channel_name)
                  
                  i += 2
              else:
                  i += 1
          
          print(f'üìä Total channels found: {channel_count}')
          print(f'‚úÖ Matched channels: {len(matched_channels)}')
          print(f'‚ùå Unmatched channels: {len(unmatched_channels)}')
          
          print('\\nüéØ === MATCHED CHANNELS ===')
          for channel_name, custom_name, logo_url in matched_channels:
              print(f'   ‚úÖ \"{channel_name}\" -> \"{custom_name}\" -> {logo_url}')
          
          print('\\n‚ö†Ô∏è === UNMATCHED CHANNELS (First 10) ===')
          for channel_name in unmatched_channels[:10]:
              print(f'   ‚ùå \"{channel_name}\"')
          
          # ‡ß®. M3U ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç WITH BETTER MATCHING
          print('\\nüîÑ === PROCESSING M3U WITH LOGOS ===')
          final_m3u_lines = []
          i = 0
          logos_applied = 0
          
          while i < len(m3u_lines):
              line = m3u_lines[i]
              if line.startswith('#EXTINF:-1'):
                  channel_name = m3u_lines[i + 1] if i + 1 < len(m3u_lines) else ''
                  channel_name_upper = channel_name.upper()
                  
                  # IMPROVED MATCHING LOGIC
                  current_logo = None
                  matched_channel = None
                  
                  for custom_channel, logo_url in CUSTOM_LOGOS.items():
                      # Multiple matching strategies
                      if (custom_channel in channel_name_upper or 
                          channel_name_upper in custom_channel or
                          any(part in channel_name_upper for part in custom_channel.split())):
                          current_logo = logo_url
                          matched_channel = custom_channel
                          break
                  
                  # Apply logo
                  if current_logo:
                      if 'tvg-logo=' in line:
                          line = re.sub(r'tvg-logo=\"[^\"]*\"', f'tvg-logo=\"{current_logo}\"', line)
                      else:
                          line = line.replace('#EXTINF:-1', f'#EXTINF:-1 tvg-logo=\"{current_logo}\"')
                      
                      logos_applied += 1
                      print(f'   ‚úÖ Applied logo to: \"{channel_name}\"')
                  
                  final_m3u_lines.append(line)
                  if i + 1 < len(m3u_lines):
                      final_m3u_lines.append(m3u_lines[i + 1])
                  i += 2
              else:
                  final_m3u_lines.append(line)
                  i += 1
          
          # Final M3U ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
          with open('CricHd.m3u', 'w', encoding='utf-8') as f:
              f.write('\\n'.join(final_m3u_lines))
          
          print(f'\\nüìà === M3U PROCESSING SUMMARY ===')
          print(f'‚úÖ Total logos applied: {logos_applied}')
          print(f'üì∫ Total channels processed: {channel_count}')
          
          # ‡ß©. JSON ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç (existing code)
          print('\\nüìÑ === PROCESSING JSON FILE ===')
          json_url = 'https://raw.githubusercontent.com/abusaeeidx/CricHd-playlists-Auto-Update-permanent/main/api.json'
          new_json_data = requests.get(json_url).json()
          
          # Custom logos ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® (JSON ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
          json_logo_map = {}
          for channel, logo in CUSTOM_LOGOS.items():
              json_logo_map[channel.upper()] = logo
          
          # JSON ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
          json_logos_applied = 0
          for item in new_json_data:
              if 'name' in item:
                  channel_name_upper = item['name'].upper()
                  for custom_channel, logo_url in json_logo_map.items():
                      if custom_channel in channel_name_upper:
                          item['logo'] = logo_url
                          json_logos_applied += 1
                          break
          
          # Final JSON ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
          with open('api.json', 'w', encoding='utf-8') as f:
              json.dump(new_json_data, f, indent=2, ensure_ascii=False)
          
          print(f'‚úÖ JSON logos applied: {json_logos_applied}')
          print('üéâ PROCESSING COMPLETED!')
          print(f'üìä M3U: {logos_applied}/{channel_count} channels got custom logos')
          print(f'üìä JSON: {json_logos_applied}/{len(new_json_data)} items got custom logos')
          "
